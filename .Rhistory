setwd("C:/Users/hliu/Documents/R_study/R programming/assignment_3/rprog-data-ProgAssignment3-data")
setwd("C:/Users/hliu/Documents/R_study/R programming/assignment_3/rprog-data-ProgAssignment3-data")
getwd()
setwd("C:/Users/hliu/Documents/R_study/R programming/assignment_3/rprog-data-ProgAssignment3-data")
home = getwd()
files = dir(home, pattern="*.csv", full.names = TRUE)
setwd("C:/Users/hliu/Documents/R_study/R programming/assignment_3/rprog-data-ProgAssignment3-data")
home = getwd()
files = dir(home, pattern="*.csv", full.names = TRUE)
files[1]
files[2]
outcome = read.csv(files[2]. colClasses = 'character')
outcome = read.csv(files[2], colClasses = 'character')
head(outcome)
ncol(outcome)
names(outcome)
death_rate_heart_attack = outcome[, 11]
hist(death_rate_heart_attack)
death_rate_heart_attack = as.numeric(outcome[, 11])
hist(death_rate_heart_attack)
head(death_rate_heart_attack)
state = outcome[, 7]
state
outcome['state' == 'TX']
subset(outcome, state == 'TX')
sub = subset(outcome, state == 'TX')
dim(sub)
names(sub)
sub[, 7]
test = c(1, 2, 3)
test
if(3 %in% test){print(3)}
if(4 %in% test){print(3)}
if(4 %not in% test){print(3)}
if(4 NOT %in% test){print(3)}
if!(4 %in% test){print(3)}
if(!(4 %in% test)){print(3)}
best = function(state, outcome) {
if(!(state %in% outcome[, 7])){print('invalid state')}
if(!(outcome %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
}
best('BB', 'heart attack')
outcome[, 7]
test = c('aa', 'bb')
test
if('aa' %in% test){print('aa')}
test = c('aa', 'aa', bb')
)
))
test = c('aa', 'aa', 'bb')
test
if('aa' %in% test){print('aa')}
if('ab' %in% test){print('aa')}
best = function(state, disease) {
if(!(state %in% outcome[, 7])){print('invalid state')}
if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
}
best('BB', 'heart attack')
best('MD', 'heart ttack')
best = function(state, disease) {
if(!(state %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == state)
dim(sub)
}
}
best('MD', 'heart attack')
best = function(sta, disease) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
dim(sub)
}
}
best('MD', 'heart attack')
best('TX', 'heart attack')
names(sub)
best = function(sta, disease) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
if(disease == 'heart attack'){
sub_order = sub[order(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack), ]}
sub_order[1, 2]
}
}
best('MD', 'heart attack')
best = function(sta, disease) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
if(disease == 'heart attack'){
sub_order = sub[order(sub[, 11]), ]}
sub_order[1, 2]
}
}
best('MD', 'heart attack')
best('TX', 'heart attack')
best = function(sta, disease) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
if(disease == 'heart attack'){
sub_order = sub[order(sub[, 11]), ]
sub_order[1, 2]
}
if(disease == 'heart failure'){
sub_order = sub[order(sub[, 17]), ]
sub_order[1, 2]
}
if(disease == 'pneumonia'){
sub_order = sub[order(sub[, 23]), ]
sub_order[1, 2]
}
}
}
best('TX', 'heart attack')
best = function(sta, disease) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
if(disease == 'heart attack'){
sub_order = sub[order(sub[, 11]), ]
}
if(disease == 'heart failure'){
sub_order = sub[order(sub[, 17]), ]
}
if(disease == 'pneumonia'){
sub_order = sub[order(sub[, 23]), ]
}
sub_order[1, 2]
}
}
best('TX', 'heart attack')
best('TX', 'heart failure')
best('MD', 'heart attack')
best('MD', 'pneumonia')
best = function(sta, disease) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
if(disease == 'heart attack'){
sub_order = sub[order(sub[, 11], sub[, 2]), ]
}
if(disease == 'heart failure'){
sub_order = sub[order(sub[, 17], sub[, 2]), ]
}
if(disease == 'pneumonia'){
sub_order = sub[order(sub[, 23], sub[, 2]), ]
}
sub_order[1, 2]
}
}
best('MD', 'pneumonia')
best('MD', 'heart attack')
best('TX', 'heart failure')
sub
dim(sub)
sub[order(sub[, 11])][1, ]
sub[order(sub[, 11])]
sub[order(sub[, 2])]
sub = subset(outcome, state == 'MD')
dim(sub)
sub[order(sub[, 2])]
md_sub = sub[order(sub[, 17])]
md_sub[1, 2]
names(md_sub)
names(sub)
md_sub = sub[order(sub[, 17]), ]
names(md_sub)
md_sub[1, 2]
md_sub = sub[order(sub[, 17], sub[, 2]), ]
md_sub[1, 2]
md_sub[, 17]
md_sub[, 2]
md_sub = sub[order(unlist(sub[, 17]), sub[, 2]), ]
md_sub[, 17]
md_sub = sub[order(as.numeric(sub[, 17]), sub[, 2]), ]
md_sub[, 17]
best = function(sta, disease) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
if(disease == 'heart attack'){
sub_order = sub[order(as.numeric(sub[, 11]), sub[, 2]), ]
}
if(disease == 'heart failure'){
sub_order = sub[order(as.numeric(sub[, 17]), sub[, 2]), ]
}
if(disease == 'pneumonia'){
sub_order = sub[order(as.numeric(sub[, 23]), sub[, 2]), ]
}
sub_order[1, 2]
}
}
best('TX', 'heart failure')
best('MD', 'pneumonia')
rankhospital = function(sta, disease, rank) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
if(disease == 'heart attack'){
sub_order = sub[order(as.numeric(sub[, 11]), sub[, 2]), ]
}
if(disease == 'heart failure'){
sub_order = sub[order(as.numeric(sub[, 17]), sub[, 2]), ]
}
if(disease == 'pneumonia'){
sub_order = sub[order(as.numeric(sub[, 23]), sub[, 2]), ]
}
sub_order[rank, 2]
}
}
rankhospital('TX', 'heart failure', 4)
rankhospital('TX', 'heart failure', 'worst')
rankhospital('TX', 'heart failure', 5000)
rankhospital('TX', 'heart failure', 10)
dim(sub)
dim(sub)[1]
rankhospital = function(sta, disease, rank) {
if(!(sta %in% outcome[, 7])){print('invalid state')}
else if(!(disease %in% c('heart failure', 'heart attack', 'pneumonia'))){print('invalid outcome')}
else {
sub = subset(outcome, state == sta)
if(disease == 'heart attack'){
sub_order = sub[order(as.numeric(sub[, 11]), sub[, 2]), ]
}
if(disease == 'heart failure'){
sub_order = sub[order(as.numeric(sub[, 17]), sub[, 2]), ]
}
if(disease == 'pneumonia'){
sub_order = sub[order(as.numeric(sub[, 23]), sub[, 2]), ]
}
if(rank == 'best'){rank = 1}
if(rank == 'worst'){rank = dim(sub_order)[1]}
sub_order[rank, 2]
}
}
rankhospital('MD', 'heart attack', 'worst')
rankhospital('MD', 'heart attack', 'best')
rankhospital('MD', 'heart attack', 1)
rankhospital('MD', 'heart attack', 40)
rankhospital('MD', 'heart attack', 45)
rankhospital('MD', 'heart attack', 46)
rankhospital('TX', 'heart failure', 4)
rankhospital('TX', 'heart failure', 1)
rankhospital('TX', 'heart failure', 370)
rankhospital('TX', 'heart failure', 371)
rankhospital('TX', 'heart failure', 'worst')
rankhospital('MD', 'heart attack', 44)
rankhospital('MD', 'heart attack', 46)
rankhospital('MD', 'heart attack', 43)
rankhospital('MD', 'heart attack', 42)
rankhospital('MD', 'heart attack', 41)
getwd()
setwd('C:/Users/hliu/Documents/R_study/cleaning data')
getwd()
if(!file.exists('data')){dir.create('data')}
fileUrl = "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = './data/cameras.csv', method = 'curl')
download.file(fileUrl, destfile = './data/cameras.csv')
download.file(fileUrl, destfile = './data/cameras.csv', method = 'internal')
camera = read.csv('./data/cameras.csv')
head(camera)
names(camera)
camera = read.csv('./data/cameras.csv', na.strings = NA)
camera = read.csv('./data/cameras.csv', na.strings = NA, quote = "")
camera = read.csv('./data/cameras.csv', na.strings = NA)
library(XML)
install.packages('XML')
library(XML)
fileUrl = "http://www.w3schools.com/xml/simple.xml"
doc = xmlTreeParse(fileUrl, useInternal = TRUE)
class(doc)
rootNode = xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[1]
rootNode[1, 1]
rootNode[1][1]
rootNode[[1]]
rootNode[[1]][[1]]
xpathSApply(rootNode, '//name', xmlValue)
rootNode
xpathSApply(rootNode, '//name', xmlValue)
install.packages(jsonlite)
install.packages('jsonlite')
library(jsonlite)
jsondata = fromJSON("https://api.github.com/users/jtleek/repos")
install.packages('curl')
jsondata = fromJSON("https://api.github.com/users/jtleek/repos")
names(jsondata)
jsondata[1]
jsondata[2]
jsondata[[2]
]
jsondata['owner']
names(jsondata)
jsondata[,'owner']
jsondata['owner']['login']
jsondata['owner']
library(data.table)
test = data.frame(x = rnorm(10, 1), y = rnorm(10, 2), z = rnorm(10, 3))
test
DT = data.table(test)
DT
tables()
DT[2, ]
DT[,2]
DT[, 2]
DT[, 1]
dim(DT)
DT[y <2, ]
DT['y' <2, ]
DT[1< y <2, ]
DT[y <2 AND y > 1, ]
DT[(y <2 AND y > 1), ]
DT[y < 2 & y . 1, ]
DT[y < 2 & y >1, ]
DT[c(2, 3),]
DT[c(2, 5),]
DT[, 2, with = FALSE]
DT[DT[, 2]>1, ]
DT[y>1, ]
DT[DT[, 2, with=FALSE]>1, ]
DT[DT[,2,with=FALSE]>1, ]
DT[, mean(x)]
DT[, table(x)]
DT[, w:=z^2]
DT
DT[, w:=z^3]
DT
head(DT, n=3)
DT[, m:={temp=x+2, log2(temp+5)}]
DT[, m:={temp=x+2; log2(temp+5)}]
DT
DT[, k:={x>0 & y>1}]
DT
DT[, o=mean(x), by=k]
DT[, o:=mean(x), by=k]
DT
setkey(DT, k)
DT['true']
DT['TRUE']
DT[1]
DT
DT[, p:=rep(c('a', 'b'), each=5)]
DT
setkey(DT, p)
DT['a']
DT2 = data.table(h=rnorm(10, 10), l=rep(c('a', 'b'), each =5))
DT2
setkey(DT2, l)
merge(DT, DT2)
DT2 = data.table(h=rnorm(10, 10), p=rep(c('a', 'b'), each =5))
merge(DT, DT2, by=p)
merge(DT, DT2)
DT1 = data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 = data.table(x=c('a', 'b', 'dt2'), y=5:7)
DT1
DT2
setkey(DT1,x)
setkey(DT2, x)
merge(DT1, DT2, by=x)
merge(DT1, DT2)
DT2 = data.table(x=c('a', 'b', 'dt2'), z=5:7)
DT2
merge(DT1, DT2)
install.packages('RMySQL')
ucscDb = dbConnect(MySQL(), user = 'genome', host = 'genome-mysql.cse.ucsc.edu')
library(RMySQL)
install.packages("DBI")
install.packages("DBI")
library(RMySQL)
ucscDb = dbConnect(MySQL(), user = 'genome', host = 'genome-mysql.cse.ucsc.edu')
results = dbGetQuery(ucscDb, 'show databases;')
results
dbDisconnect(ucscDb)
hg19=dbConnect(MySQL(), user = 'genome', db = 'hg19', host = 'genome-mysql.cse.ucsc.edu')
dbListTables(hg19)
affdata = dbReadTable(hg19, 'affyU133Plus2')
head(affdata, n=3)
names(affdata)
dbDisconnect(hg19)
con = url('http://fanfandesign.com/About.html')
htmlCode = readLines(con)
close(con)
htmlCode
x = data.frame(var1 = rnorm(5, 2), var2= rnorm(5, 5), var3 = rnorm(5,10))
x
x['var2']
x['var2'][c(1,3)]=NA
x['var2']
class(x['var2'])
class(x$var2)
x$var2
x$var2[1]
x$var2[[1]]
x$var2[c(1,3)] = NA
x
x[, 'var1']
x[, 1]
x[1:2, 'var2']
x
x[x$'var2'>5,]
x[which(x$'var2'>5),]
sort(x$var2, na.last=TRUE)
x[order(x$var2),]
x[order(x$var2, na.first = TRUE),]
x[order(x$var2, na.last = TRUE),]
x[order(-x$var2, na.last = TRUE),]
x[order(-x$var1),]
x[order(x$var1),]
x[order(x$var1, x$var3),]
install.packages('plyr')
library(plyr)
arrange(x, var1)
arrange(x, -var1)
x[, var4:= rnorm(5)]
x$var4 = rnorm(5)
x
fileUrl = "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile='./data/restaurants.csv', method='internal')
restdata = read.csv('./data/restaurants.csv')
dim(restdata)
head(restdata, n=3)
summary(restdata)
names(restdata)
restdata[1:5, 1]
restdata[1:10, 1]
restdata[, restdata$policeDistrict]
restdata[restdata$policeDistrict]
restdata[1, policeDistrict]
restdata[1, 5]
restdata[1:10, 5]
restdata$policeDistrict
head(restdata$policeDistrict, n=10)
restdata$councilDistrict
quantile(restdata$councilDistrict, probs=c(0.5, 0.75, 0.9))
sum(is.na(restdata$councilDistrict))
sum(is.na(restdata$policeDistrict))
sum(is.na(restdata))
colSums(is.na(restdata))
restdata$zipCode %in% c('21212', '21213')
table(restdata$zipCode %in% c('21212', '21213'))
restdata[restdata$zipCode %in% c('21212', '21213'), ]
object.size(restdata)
print(object.size(restdata), unit='Mb')
restdata$nearMe = restdata$neighborhood %in% c('Roland Park', 'Homeland')
head(restdata$nearMe, n=10)
sum(restdata$nearMe=='TRUE')
sum(restdata$nearMe=='FALSE')
table(restdata$nearMe)
test = cut(restdata$zipCode, breaks=quantile(restdata$zipCode, probs = c(0.5, 0.75, 0.9)))
dim(test)
test
table(test)
test = cut(restdata$zipCode, breaks=quantile(restdata$zipCode))
test
table(test)
restdata$zipGroup = test
restdata$zipGroup, restdata$zipCode
head(restdata$zipGroup, restdata$zipCode, n=3)
table(restdata$zipGroup, restdata$zipCode)
install.packages(reshae2)
install.packages(reshape2)
install.packages('reshape2')
library(reshape2)
head(mtcars)
dim(mtcars)
?melt
mtcars$carname = rownames(mtcars)
head(mtcars)
carmelt = melt(mtcars, id=('carname', 'gear', 'cyl'))
carmelt = melt(mtcars, id=c('carname', 'gear', 'cyl'))
carmelt
carmelt = melt(mtcars, id=c('carname', 'gear', 'cyl'), measure.vars=c('hp'))
carmelt
cyldata = cast(carmelt, cyl - variable)
cyldata = dcast(carmelt, cyl - variable)
cyldata = dcast(carmelt, gear - variable)
cyldata = dcast(carmelt, 'gear' - variable)
cyldata = dcast(carmelt, 'gear' - 'variable')
cyldata = dcast(carmelt, gear - variable, mean)
cyldata = dcast(carmelt, gear ~ variable, mean)
cyldata
cyldata = dcast(carmelt, cyl ~ variable, mean)
cyldata
InsectSprays
spraymelt = melt(InsectSprays, id='spray', measure.vars = 'count')
spraymelt
spraycount = dcast(spraymelt, count ~ variable, sum)
spraycount = dcast(spraymelt, spray ~ variable, sum)
spraycount
install.packages(dplyr)
install.packages('dplyr')
library(dplyr)
install.packages('installr')
library(installr)
updateR()
updateR()
install.packages('dplyr')
